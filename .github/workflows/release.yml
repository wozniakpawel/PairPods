name: Build & Release

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:
    inputs:
      test-version:
        description: 'Test version number (e.g., 0.0.0)'
        required: true
        default: '0.0.0-test'

permissions:
  contents: write

jobs:
  build-release:
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.2.2
        with:
          fetch-depth: 0

      - name: Set Xcode version
        uses: maxim-lobanov/setup-xcode@v1.6.0
        with:
          xcode-version: '16.2'

      - name: Extract tag name and version
        id: extract_tag
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            # For manual test runs
            echo "tag_name=v${{ inputs.test-version }}" >> $GITHUB_OUTPUT
            echo "version=${{ inputs.test-version }}" >> $GITHUB_OUTPUT
            echo "Testing with version: ${{ inputs.test-version }}"
          else
            # Normal tag-triggered run
            TAG_NAME=${GITHUB_REF#refs/tags/}
            VERSION=${TAG_NAME#v}
            echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "Extracted tag: $TAG_NAME, version: $VERSION"
          fi

      - name: Install Apple Certificate
        uses: apple-actions/import-codesign-certs@v3
        with:
          p12-file-base64: ${{ secrets.CERTIFICATES_P12 }}
          p12-password: ${{ secrets.CERTIFICATES_P12_PASSWORD }}

      - name: Install Sparkle tools
        id: sparkle-install
        run: |
          brew install --cask sparkle
          GENERATE_APPCAST_PATH=$(find "$(brew --prefix)/Caskroom/sparkle" -name "generate_appcast" -type f | head -n 1)
          echo "Found generate_appcast at: $GENERATE_APPCAST_PATH"
          echo "appcast_tool=$GENERATE_APPCAST_PATH" >> $GITHUB_OUTPUT

      - name: Build app
        env:
          TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        run: |
          xcodebuild archive \
            -scheme PairPods \
            -configuration Release \
            -archivePath ./build/PairPods.xcarchive \
            CODE_SIGN_IDENTITY="Developer ID Application" \
            CODE_SIGN_STYLE=Manual \
            DEVELOPMENT_TEAM=$TEAM_ID \
            ARCHS="x86_64 arm64" \
            ONLY_ACTIVE_ARCH=NO

      - name: Verify app architectures
        run: |
          lipo -info ./build/PairPods.xcarchive/Products/Applications/PairPods.app/Contents/MacOS/PairPods

      - name: Export app
        run: |
          xcodebuild -exportArchive \
            -archivePath ./build/PairPods.xcarchive \
            -exportOptionsPlist ./Configs/ExportOptions.plist \
            -exportPath ./build/export

      - name: Create versioned ZIP
        id: create_zip
        env:
          VERSION: ${{ steps.extract_tag.outputs.version }}
        run: |
          FILENAME="PairPods-${VERSION}.app.zip"
          echo "Creating versioned ZIP file: $FILENAME"
          ditto -c -k --keepParent ./build/export/PairPods.app ./build/export/$FILENAME
          echo "filename=$FILENAME" >> $GITHUB_OUTPUT

      - name: Notarize app
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          APPLE_APP_PASSWORD: ${{ secrets.APPLE_APP_PASSWORD }}
          FILENAME: ${{ steps.create_zip.outputs.filename }}
        run: |
          # Submit for notarization and wait for completion
          xcrun notarytool submit ./build/export/$FILENAME \
            --apple-id "$APPLE_ID" \
            --team-id "$APPLE_TEAM_ID" \
            --password "$APPLE_APP_PASSWORD" \
            --wait
          
          # Staple the app
          xcrun stapler staple ./build/export/PairPods.app
          
          # Re-zip the stapled app with the versioned filename
          cd ./build/export
          rm $FILENAME
          ditto -c -k --keepParent PairPods.app $FILENAME

      - name: Generate appcast
        env:
          SPARKLE_KEY: ${{ secrets.SPARKLE_PRIVATE_KEY }}
          GENERATE_APPCAST_PATH: ${{ steps.sparkle-install.outputs.appcast_tool }}
          TAG_NAME: ${{ steps.extract_tag.outputs.tag_name }}
        run: |
          # Write key with explicit line ending handling
          echo -n "$SPARKLE_KEY" > sparkle_private_key

          # Generate appcast file
          "$GENERATE_APPCAST_PATH" \
            --ed-key-file "$(pwd)/sparkle_private_key" \
            --download-url-prefix "https://github.com/wozniakpawel/PairPods/releases/download/$TAG_NAME" \
            ./build/export

      - name: Update appcast.xml
        run: |
          cp ./build/export/appcast.xml ./Sparkle/appcast.xml
          
          # Check if appcast file changed
          if git diff --quiet ./Sparkle/appcast.xml; then
            echo "Error: The generated appcast file is identical to the existing one."
            echo "This likely means the release contains no changes or the version wasn't updated."
            exit 1
          fi
          
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add ./Sparkle/appcast.xml
          git commit -m "Update appcast.xml for version ${GITHUB_REF#refs/tags/}"
          git push https://${{ github.actor }}:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git HEAD:main

      - name: Extract current version notes
        id: extract_notes
        env:
          VERSION: ${{ steps.extract_tag.outputs.version }}
        run: |
          # Extract just the section for current version
          echo "Extracting release notes for version: $VERSION"
          
          awk -v ver="$VERSION" '
            BEGIN { found=0; buffer=""; }
            /^## \['"$VERSION"'\]/ { found=1; }
            /^## \[.*\]/ && !/^## \['"$VERSION"'\]/ && found==1 { found=0; }
            { if (found) buffer = buffer $0 "\n" }
            END { print buffer }' CHANGELOG.md > release-notes.md
          
      - name: Create Release
        if: ${{ !inputs.test-version }}
        uses: softprops/action-gh-release@v2.2.1
        with:
          files: |
            ./build/export/${{ steps.create_zip.outputs.filename }}
            ./build/export/appcast.xml
          body_path: release-notes.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Test Release Output (No actual release)
        if: ${{ inputs.test-version }}
        run: |
          echo "TESTING RELEASE PROCESS"
          echo "Would release version: ${{ inputs.test-version || steps.extract_tag.outputs.version }}"
          echo "Files that would be included:"
          ls -la ./build/export/
          echo "Contents of release notes:"
          cat release-notes.md || echo "No release notes found"